var labelsIndex=[["-Cprefer-dynamic","Codegen option: Prefer dynamic linking to static linking."],["-Zbuild-std","Unstable Cargo option: Compile the standard library yourself."],["-Znormalize-docs","Unstable rustdoc option: Normalize/evaluate types when generating docs"],["-Zpolymorphize","Unstable option: Polymorphization."],["-Zrandomize-layout","Unstable option: Randomize the layout of types."],["-Zterminal-urls","Unstable option: emit OSC8 hyperlinks in diagnostics"],["-Zthir-unsafeck","Unstable option: THIR unsafeck"],["-Zunpretty","Unstable option: unpretty debug print"],["-Zvalidate-mir","Unstable option: MIR validation"],["A-abi","Area: Concerning the application binary interface (ABI)."],["A-allocators","Area: Custom and system allocators"],["A-array","Area: [T; N]"],["A-associated-items","Area: Associated items such as associated types and consts."],["A-async-await","Area: Async & Await"],["A-atomic","Area: atomics, barriers, and sync primitives"],["A-attributes","Area: #[attributes(..)]"],["A-auto-traits","Area: auto traits (`auto trait Send`)"],["A-autovectorization","Issue related to autovectorization, which can impact perf or code size."],["A-borrow-checker","Area: The borrow checker"],["A-ci","Area: Our Github Actions CI"],["A-cli","Area: Command line interface to the compiler."],["A-clippy","Area: Clippy"],["A-closures","Area: closures (`|args| { .. }`)"],["A-code-coverage","Area: Source-based code coverage (-Cinstrument-coverage)"],["A-codegen","Area: Code generation"],["A-coercions","Area: implicit and explicit `expr as Type` coercions"],["A-coherence","Area: Coherence"],["A-coinduction","Area: Concerning coinduction, most often for auto traits"],["A-collections","Area: std::collections."],["A-concurrency","Area: Concurrency related issues."],["A-const-eval","Area: constant evaluation (mir interpretation)"],["A-const-fn","Area: const fn foo(..) {..}. Pure functions which can be applied at compile time."],["A-const-generics","Area: const generics (parameters and arguments)"],["A-const-prop","Area: Constant Propagation"],["A-contributor-roadblock","Area: Makes things more difficult for new contributors to rust itself"],["A-control-flow","Area: Relating to control flow"],["A-coroutines","Area: Coroutines"],["A-cranelift","Things relevant to the [future] cranelift backend"],["A-crate-compat","Area: Impacting semver compatibility of crates in the ecosystem"],["A-crates","Area: Crates and their interactions (like crate loading)"],["A-cross","Area: Cross compilation"],["A-cross-crate-reexports","Area: Documentation that has been re-exported from a different crate"],["A-debuginfo","Area: Debugging information in compiled programs (DWARF, PDB, etc.)"],["A-destructors","Area: destructors (Drop, ..)"],["A-diagnostics","Area: Messages for errors, warnings, and lints"],["A-doc-alias","Area: #[doc(alias)]"],["A-doc-coverage","Area: Calculating how much of a crate has documentation"],["A-docs","Area: documentation for any part of the project, including the compiler, standard library, and tools"],["A-doctests","Area: Documentation tests, run by rustdoc"],["A-download-rustc","Area: Related to the `rust.download-rustc` build option"],["A-driver","Area: rustc_driver that ties everything together into the `rustc` compiler"],["A-dst","Area: Dynamically Sized Types"],["A-edition-2018-lints","Area: lints supporting the 2018 edition"],["A-edition-2021","Area: The 2021 edition"],["A-edition-2024","Area: The 2024 edition"],["A-edition-2027","Area: The 2027 edition"],["A-error-codes","Area: Explanation of an error code (--explain)"],["A-error-handling","Area: Error handling"],["A-exhaustiveness-checking","Relating to exhaustiveness / usefulness checking of patterns"],["A-ffi","Area: Foreign Function Interface (FFI)"],["A-floating-point","Area: Floating point numbers and arithmetic"],["A-fmt","Area: std::fmt"],["A-frontend","Area: frontend (errors, parsing and HIR)"],["A-gcc","Things relevant to the [future] GCC backend"],["A-github-actions","Area: GitHub Actions (GHA)"],["A-grammar","Area: The grammar of Rust"],["A-hir","Area: The high-level intermediate representation (HIR)"],["A-impl-trait","Area: impl Trait. Universally / existentially quantified anonymous types with static dispatch."],["A-implied-bounds","Area: Related to implied bounds"],["A-incr-comp","Area: Incremental compilation"],["A-inference","Area: Type inference"],["A-inline-assembly","Area: inline asm!(..)"],["A-intra-doc-links","Area: Intra-doc links, the ability to link to items in docs by name"],["A-intrinsics","Area: intrinsics"],["A-io","Area: std::io, std::fs, std::net and std::path"],["A-iterators","Area: Iterators"],["A-lang-item","Area: lang items"],["A-layout","Area: Memory layout of types"],["A-lazy-normalization","Area: lazy normalization (tracking issue: #60471)"],["A-libtest","Area: #[test] related"],["A-licensing","Area: compiler licensing"],["A-lifetimes","Area: lifetime related"],["A-linkage","Area: linking into static, shared libraries and binaries"],["A-lint","Area: Lints (warnings about flaws in source code) such as unused_mut."],["A-LLVM","Area: Code generation parts specific to LLVM. Both correctness bugs and optimization-related issues."],["A-local-reexports","Area: Documentation that has been locally re-exported (i.e., non-cross-crate)"],["A-lto","Area: Link Time Optimization"],["A-macros","Area: All kinds of macros (custom derive, macro_rules!, proc macros, ..)"],["A-macros-1.2","Area: Declarative macros 1.2"],["A-macros-2.0","Area: Declarative macros 2.0 (#39412)"],["A-markdown-parsing","Area: Markdown parsing for doc-comments"],["A-maybe-future-edition","Something we may consider for a future edition."],["A-meta","Area: Issues about the rust-lang/rust repository."],["A-metadata","Area: Crate metadata"],["A-mir","Area: Mid-level IR (MIR) - https://blog.rust-lang.org/2016/04/19/MIR.html"],["A-mir-opt","Area: MIR optimizations"],["A-mir-opt-inlining","Area: MIR inlining"],["A-mir-opt-nrvo","Fixed by NRVO"],["A-miri","Area: The miri tool"],["A-monomorphization","Area: Monomorphization"],["A-naked","Area: #[naked], prologue and epilogue-free, functions, https://git.io/vAzzS"],["A-NLL","Area: Non Lexical Lifetimes (NLL)"],["A-panic","Area: Panicking machinery"],["A-parallel-queries","Area: Parallel query execution"],["A-parser","Area: The parsing of Rust source code to an AST."],["A-patterns","Relating to patterns and pattern matching"],["A-pin","Area: Pin"],["A-plugin","Area: compiler plugins, doc.rust-lang.org/nightly/unstable-book/language-features/plugin.html"],["A-pretty","Area: Pretty printing."],["A-proc-macro-back-compat","Area: Backwards compatibility hacks for proc macros -s"],["A-proc-macros","Area: Procedural macros"],["A-process","Area: std::process and std::env"],["A-profile-rt","Area: The profiler runtime for llvm-profdata and llvm-cov"],["A-query-system","Area: The rustc query system (https://rustc-dev-guide.rust-lang.org/query.html)"],["A-raw-pointers","Area: raw pointers, MaybeUninit, NonNull"],["A-repr-c","Issue: `repr(C)` does not work the way it should"],["A-reproducibility","Area: Reproducible / Deterministic builds"],["A-resolve","Area: Path resolution"],["A-result-option","Area: Result and Option combinators"],["A-rls","Area: Rust Language Server (RLS)"],["A-runtime","Area: std's runtime and \"pre-main\" init for handling backtraces, unwinds, stack overflows"],["A-rust-2018-preview","Area: The 2018 edition preview"],["A-rustdoc-js","Area: Rustdoc's front-end"],["A-rustdoc-json","Area: Rustdoc JSON backend"],["A-rustdoc-scrape-examples","Area: The (unstable) rustdoc scrape-examples feature described in RFC 3123"],["A-rustdoc-search","Area: Rustdoc's search feature"],["A-rustdoc-themes","Area: Themes for HTML pages generated by rustdoc"],["A-rustdoc-type-layout","Area: `rustdoc --show-type-layout` (nightly-only)"],["A-rustdoc-ui","Area: rustdoc UI (generated HTML)"],["A-rustfmt","Area: Rustfmt"],["A-sanitizers","Area: Sanitizers for correctness and code quality."],["A-save-analysis","Area: saving results of analyses such as inference and borrowck results to a file."],["A-security","Area: Security related issues (example: address space layout randomization)"],["A-self-profile","Area: Self-profiling feature of the compiler"],["A-simd","Area: SIMD (Single Instruction Multiple Data)"],["A-slice","Area: [T]"],["A-slice-patterns","Area: slice patterns, https://github.com/rust-lang/rust/issues/23121"],["A-specialization","Area: Trait impl specialization"],["A-spurious","Area: Spurious failures in builds (spuriously == for no apparent reason)"],["A-stability","Area: issues related to #[stable] and #[unstable] attributes themselves."],["A-stack-probe","Area: stack probing and guard pages"],["A-str","Area: str and String"],["A-strict-provenance","Area: Strict provenance for raw pointers"],["A-suggestion-diagnostics","Area: Suggestions generated by the compiler applied by `cargo fix`."],["A-syntaxext","Area: Syntax extensions"],["A-synthetic-impls","Area: Synthetic impls, used by rustdoc to document auto traits and traits with blanket impls"],["A-target-feature","Area: Enabling/disabling target features like AVX, Neon, etc."],["A-target-specs","Area: compile-target specifications"],["A-targets","Area: Concerning the implications of different compiler targets"],["A-technical-debt","Area: Internal cleanup work"],["A-testsuite","Area: The testsuite used to check the correctness of rustc"],["A-thread","Area: std::thread"],["A-thread-locals","Area: Thread local storage (TLS)"],["A-time","Area: Time"],["A-trait-objects","Area: trait objects, vtable layout"],["A-traits","Area: Trait system"],["A-translation","Area: Translation infrastructure, and migrating existing diagnostics to SessionDiagnostic"],["A-type-based-search","Area: Searching rustdoc pages using type signatures"],["A-typesystem","Area: The type system"],["A-unicode","Area: Unicode"],["A-valtree","Area: Value trees or fixed by value trees"],["A-variance","Area: Variance (https://doc.rust-lang.org/nomicon/subtyping.html)"],["A-visibility","Area: Visibility / privacy."],["A-zst","Area: Zero-sized types (ZST)."],["april-1st","Started on the 1st of April"],["AsyncAwait-Polish","Async-await issues that are part of the \"polish\" area"],["AsyncAwait-Triaged","Async-await issues that have been triaged during a working group meeting."],["B-experimental","Blocker: In-tree experiment; RFC pending or unneeded."],["B-RFC-approved","Blocker: Approved by a merged RFC but not yet implemented."],["B-RFC-implemented","Blocker: Approved by a merged RFC and implemented."],["B-unstable","Blocker: Implemented in the nightly compiler and unstable."],["beta-accepted","Accepted for backporting to the compiler in the beta channel."],["beta-nominated","Nominated for backporting to the compiler in the beta channel."],["C-bug","Category: This is a bug."],["C-cleanup","Category: PRs that clean code up or issues documenting cleanup."],["C-discussion","Category: Discussion or questions that doesn't represent real issues."],["C-enhancement","Category: An issue proposing an enhancement or a PR with one."],["C-feature-accepted","Category: A feature request that has been accepted pending implementation."],["C-feature-request","Category: A feature request, i.e: not implemented / a PR."],["C-future-compatibility","Category: Future-compatibility lints"],["C-optimization","Category: An issue highlighting optimization opportunities or PRs implementing such"],["C-totally-not-a-tracking-issue","Category: Totally not a tracking issue"],["C-tracking-issue","Category: A tracking issue for an RFC or an unstable feature."],["call-for-testing","Marks issues that require broader testing from the community, e.g. before stabilization."],["const-generics-bad-diagnostics","An error is correctly emitted, but is confusing, for `min_const_generics`."],["const-generics-fixed-by-const_generics","A bug that has been fixed once `const_generics` is enabled."],["const-hack","This PR introduced a hack to make things valid in `const fn`."],["D-confusing","Diagnostics: Confusing error or lint that should be reworked."],["D-crate-version-mismatch","Diagnostics: Errors or lints caused be the use of two different crate versions."],["D-diagnostic-infra","Diagnostics: Issues that affect all diagnostics, or relate to the diagnostic machinery itself."],["D-edition","Diagnostics: An error or lint that should account for edition differences."],["D-inconsistent","Diagnostics: Inconsistency in formatting, grammar or style between diagnostic messages."],["D-incorrect","Diagnostics: A diagnostic that is giving misleading or incorrect information."],["D-invalid-suggestion","Diagnostics: A structured suggestion resulting in incorrect code."],["D-newcomer-roadblock","Diagnostics: Confusing error or lint; hard to understand for new users."],["D-papercut","Diagnostics: An error or lint that needs small tweaks."],["D-terse","Diagnostics: An error or lint that doesn't give enough information about the problem at hand."],["D-verbose","Diagnostics: Too much output caused by a single piece of incorrect code."],["disposition-close","This PR / issue is in PFCP or FCP with a disposition to close it."],["disposition-merge","This issue / PR is in PFCP or FCP with a disposition to merge it."],["disposition-postpone","This issue / PR is in PFCP or FCP with a disposition to postpone it."],["E-easy","Call for participation: Easy difficulty. Experience needed to fix: Not much. Good first issue."],["E-hard","Call for participation: Hard difficulty. Experience needed to fix: A lot."],["E-help-wanted","Call for participation: Help is requested to fix this issue."],["E-medium","Call for participation: Medium difficulty. Experience needed to fix: Intermediate."],["E-mentor","Call for participation: This issue has a mentor. Use #t-compiler/help on Zulip for discussion."],["E-needs-bisection","Call for participation: This issue needs bisection: https://github.com/rust-lang/cargo-bisect-rustc"],["E-needs-mcve","Call for participation: This issue has a repro, but needs a Minimal Complete and Verifiable Example"],["E-needs-stack",""],["E-needs-test","Call for participation: Writing correctness tests."],["F-abi_c_cmse_nonsecure_call","`#![feature(abi_c_cmse_nonsecure_call)]`"],["F-adt_const_params","`#![feature(adt_const_params)]`"],["F-anonymous_lifetime_in_impl_trait","`#![feature(anonymous_lifetime_in_impl_trait)]`"],["F-arbitrary_self_types","`#![feature(arbitrary_self_types)]`"],["F-asm","`#![feature(asm)]` (not `llvm_asm`)"],["F-associated_const_equality","`#![feature(associated_const_equality)]`"],["F-associated_type_bounds","`#![feature(associated_type_bounds)]`"],["F-associated_type_defaults","`#![feature(associated_type_defaults)]`"],["F-async_closure","`#![feature(async_closure)]`"],["F-async_fn_in_trait","Static async fn in traits"],["F-async_fn_traits","`#![feature(async_fn_traits)]`"],["F-async_for_loop","`#![feature(async_for_loop)]`"],["F-auto_traits","`#![feature(auto_traits)]`"],["F-bindings_after_at","`#![feature(bindings_after_at)]`"],["F-box_patterns","`#![feature(box_patterns)]`"],["F-c_str_literals","`#![feature(c_str_literals)]`"],["F-c_unwind","`#![feature(c_unwind)]`"],["F-c_variadic","`#![feature(c_variadic)]`"],["F-cfg_accessible","`#![feature(cfg_accessible)]`"],["F-cfg_version","`#![feature(cfg_version)]`"],["F-check-cfg","--check-cfg"],["F-closure_lifetime_binder","`#![feature(closure_lifetime_binder)]`"],["F-cmse_nonsecure_entry","`#![feature(cmse_nonsecure_entry)]`"],["F-coerce_unsized","The `CoerceUnsized` trait"],["F-collapse_debuginfo","`#![feature(collapse_debuginfo)]`"],["F-const_async_blocks","`#![feature(const_async_blocks)]`"],["F-const_closures","`#![feature(const_closures)]`"],["F-const_extern_fn","`#![feature(const_extern_fn)]`"],["F-const_generics","`#![feature(const_generics)]`"],["F-const_generics_defaults","`#![feature(const_generics_defaults)]`"],["F-const_mut_refs","`#![feature(const_mut_refs)]`"],["F-const_refs_to_cell","`#[feature(const_refs_to_cell)]`"],["F-const_refs_to_static","`#![feature(const_refs_to_static)]`"],["F-const_trait_impl","`#![feature(const_trait_impl)]`"],["F-constrained_naked","RFC 2972"],["F-core_intrinsics","Issue in the \"core intrinsics\" for internal usage only."],["F-coroutine_clone","`#![feature(coroutine_clone)]`"],["F-coroutines","`#![feature(coroutines)]`"],["F-custom_test_frameworks","`#![feature(custom_test_frameworks)]`"],["F-debugger_visualizer","`#![feature(debugger_visualizer)]`"],["F-decl_macro","`#![feature(decl_macro)]`"],["F-default_type_parameter_fallback","`#![feature(default_type_parameter_fallback)]`"],["F-deprecated_safe","`#![feature(deprecated_safe)]`"],["F-deref_patterns","`#![feature(deref_patterns)]`"],["F-derive_smart_pointer","`#![feature(derive_smart_pointer)]`"],["F-destructuring_assignment","`#![feature(destructuring_assignment)]`"],["F-dispatch_from_dyn","`#![feature(dispatch_from_dyn)]`"],["F-doc_auto_cfg","`#![feature(doc_auto_cfg)]`"],["F-doc_cfg","`#![feature(doc_cfg)]`"],["F-doc_masked","`#![feature(doc_masked)]`"],["F-dropck_eyepatch","`#![feature(dropck_eyepatch)]`"],["F-dyn_star","`#![feature(dyn_star)]`"],["F-effects","`#![feature(effects)]`"],["F-exclusive_range_pattern","`#![feature(exclusive_range_pattern)]`"],["F-exhaustive_patterns","`#![feature(exhaustive_patterns)]`"],["F-explicit_tail_calls","`#![feature(explicit_tail_calls)]`"],["F-extended_key_value_attributes","`#![feature(extended_key_value_attributes)]"],["F-extended_varargs_abi_support","`#![feature(extended_varargs_abi_support)]`"],["F-extern_item_impls","`#![feature(extern_item_impls)]`"],["F-extern_types","`#![feature(extern_types)]`"],["F-external_doc","`#![feature(external_doc)]`"],["F-f16_and_f128","`#![feature(f16_and_f128)]`"],["F-fn_delegation","`#![feature(fn_delegation)]`"],["F-format_implicit_args","implicit arguments for format strings (RFC 2795)"],["F-gen_blocks","`gen {}` expressions that produce `Iterator`s"],["F-generic_arg_infer","Using `_` as a const argument: #![feature(generic_arg_infer)]`"],["F-generic_assert","`#![feature(generic_assert)]`"],["F-generic_associated_types","`#![feature(generic_associated_types)]` a.k.a. GATs"],["F-generic_associated_types_extended","`#![feature(generic_associated_types_extended)]`"],["F-generic_const_exprs","`#![feature(generic_const_exprs)]`"],["F-generic_const_items","`#![feature(generic_const_items)]`"],["F-generic_const_parameter_types","`#![feature(generic_const_parameter_types)]`: allowing `<T, const V: T>` (not yet implemented))"],["F-global_registration","`#![feature(global_registration)]`"],["F-half_open_range_patterns","`#![feature(half_open_range_patterns)]`"],["F-if_let_guard","`#![feature(if_let_guard)]`"],["F-impl_restriction","`#![feature(impl_restriction)]`"],["F-impl_trait_in_assoc_type","`#![feature(impl_trait_in_assoc_type)]`"],["F-impl_trait_in_bindings","`#![feature(impl_trait_in_bindings)]`"],["F-impl_trait_in_fn_trait_return","`#![feature(impl_trait_in_fn_trait_return)]`"],["F-inherent_associated_types","`#![feature(inherent_associated_types)]`"],["F-inline_const","Inline constants (aka: const blocks, const expressions, anonymous constants)"],["F-inline_const_pat","#![feature(inline_const_pat)]"],["F-isa_attribute","Related to #[instruction_set] attribute introduced by RFC 2867"],["F-label_break_value","`#![feature(label_break_value)]`"],["F-lazy_type_alias","`#![feature(lazy_type_alias)]`"],["F-let_chains","`#![feature(let_chains)]`"],["F-let-else","Issues related to let-else statements (RFC 3137)"],["F-lifetime_capture_rules_2024","`#![feature(lifetime_capture_rules_2024)]`"],["F-lint_reasons","`#![feature(lint_reasons)]`"],["F-lint-single_use_lifetimes","`single_use_lifetimes` lint"]];export default labelsIndex;